  # Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  prepare:
    docker:
      - image: circleci/node:11.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
          - client-{{ checksum "client/package.json" }}
          - client-
      - run:
          name: Install client packages
          command: cd client && yarn install
      - save_cache:
          paths:
            - client/node_modules
          key: client-{{ checksum "client/package.json" }}
      - restore_cache:
          keys:
          - server-{{ checksum "server/package.json" }}
          - server-
      - run:
          name: Install server packages
          command: cd server && yarn install
      - save_cache:
          paths:
            - server/node_modules
          key: server-{{ checksum "server/package.json" }}
      - persist_to_workspace:
          root: .
          paths:
            - client
            - server
  test_client:
    docker:
      - image: circleci/node:11.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Running client eslint checks
          command: cd client && yarn lint
  test_server:
    docker:
      - image: circleci/node:11.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Running server eslint checks
          command: cd server && yarn lint
      - run:
          name: Running server tests
          command: cd server && yarn test
  main:
    docker:
      - image: circleci/node:11.8.0
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Verify docker compose build
          command: |
            cd server
            docker-compose up -d
            docker exec algo_server bash -c 'retry=12; while ! (curl -s --fail -i -H "Accept: application/json" -H "Content-Type: application/json" -X GET 'http://127.0.0.1:3000/users/top10' > /dev/null) && [ $retry -gt 0 ] ; do echo "retrying curl, attempts remaining: $retry"; retry=$((retry-1)); if [ $retry -eq 0 ]; then echo "fail"; exit 1; fi; sleep 5; done'
            docker-compose down
      - run:
           name: "Failure: output container logs to console"
           command: |
             docker-compose logs
           when: on_fail
workflows:
  version: 2
  build:
    jobs:
      - prepare
      - test_client:
          requires:
          - prepare
      - test_server:
          requires:
      - main
